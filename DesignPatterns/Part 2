Question 2: 

All the given parts follows Adapter Design pattern.

Part 1: java.util.Arrays#asList() 

public static <T> List<T> asList(T... a) : This method takes an array and returns a fixed size list backed by the specified array. 
This method acts as adapter between array-based API and Collections based API. 


Part 2: java.util.Collections#list()

public static <T> ArrayList<T> list(Enumeration<T> e) : This method returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration.
This method provides interoperability (as a adapter) between legacy APIs that return enumerations and new APIs that require collections.


Part 3: java.util.Collections#enumeration() 

public static <T> Enumeration<T> enumeration(Collection<T> c): This method returns an enumeration over the specified collection. This provides interoperability (as an adapter) with legacy APIs that require an enumeration as input.


Part 4: java.io.InputStreamReader(InputStream) (returns a Reader)

public InputStreamReader(InputStream in): Creates an InputStreamReader that uses the default charset. An InputStreamReader is a bridge from byte streams to character streams. It reads bytes and decodes them into characters using a specified charset. 


Part 5: java.io.OutputStreamWriter(OutputStream) (returns a Writer)

public OutputStreamWriter(OutputStream out): Creates an OutputStreamWriter that uses the default character encoding. An OutputStreamWriter is a bridge from character streams to byte streams: Characters written to it are encoded into bytes using a specified charset. 


Each invocation of a write()/reaad() method causes the encoding converter(adapter) to be invoked on the given character(s).


Part 6: javax.xml.bind.annotation.adapters.XmlAdapter#marshal() and #unmarshal()

public abstract BoundType unmarshal(ValueType v) throws Exception: Converts a value type(v) to a bound type.
public abstract ValueType marshal(BoundType v) throws Exception: Converts a bound type (v) to a value type. 

These are the methods present in XmlAdapter class. This methods are provided for adapting a bound type to a value type or vice versa. 


Answer: 

Adapter Pattern: The Adapter pattern converts the interface of a class into another interface the client expects. It works as a bridge between two incompatible interfaces.

In all the above parts there is conversion between one API to another API. In case of first four parts one type of API (array/enumeration/bytestream)-based to another type(list/enumeration/characterstream)-based APIs. (or)In case of last two parts the given (methods of a) Xmlclass(acts as a adapter) which is used convert one type to other.
                             







